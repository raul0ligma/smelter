package tests

import (
	"context"
	"fmt"
	"math/big"
	"reflect"
	"testing"
	"time"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	types2 "github.com/ethereum/go-ethereum/core/types"
	"github.com/rahul0tripathi/smelter/config"
	"github.com/rahul0tripathi/smelter/entity"
	"github.com/rahul0tripathi/smelter/executor"
	"github.com/rahul0tripathi/smelter/fork"
	"github.com/rahul0tripathi/smelter/provider"
	"github.com/rahul0tripathi/smelter/tracer"
	"github.com/rahul0tripathi/smelter/types"
	"github.com/stretchr/testify/require"
)

func TestExecuteE2E(t *testing.T) {
	ctx := context.Background()
	reader := mockProvider{}
	accountsState := entity.NewAccountsState()
	accountsStorage := entity.NewAccountsStorage()
	forkCfg := entity.ForkConfig{
		ChainID:   69,
		ForkBlock: new(big.Int).SetUint64(1),
	}
	db := fork.NewDB(&reader, forkCfg, accountsStorage, accountsState)
	cfg := config.NewConfigWithDefaults()
	cfg.ForkConfig = &forkCfg
	stateTracer := tracer.NewTracer(true)
	target := types.Address0x69
	exec, err := executor.NewExecutor(ctx, cfg, db, &reader)
	if err != nil {
		panic(err)
	}

	sender := common.HexToAddress("0x0000000000000000000000000000000000000006")

	// Deposit transaction
	deposit, _ := hexutil.Decode("0xd0e30db0")
	_, ret, _, err := exec.CallAndPersist(
		ctx, ethereum.CallMsg{
			From:  sender,
			To:    &target,
			Data:  deposit,
			Gas:   30000000,
			Value: new(big.Int).SetInt64(6969),
		}, stateTracer, map[common.Address]entity.StateOverride{
			sender: {Balance: abi.MaxUint256},
		},
	)
	require.NoError(t, err, "failed to deposit")
	t.Log("trace", stateTracer.Fmt())

	// Check balance of sender before transfer
	balanceOfx06, _ := hexutil.Decode("0x70a082310000000000000000000000000000000000000000000000000000000000000006")
	ret, _, err = exec.Call(
		ctx, ethereum.CallMsg{
			From:  sender,
			To:    &target,
			Data:  balanceOfx06,
			Gas:   30000000,
			Value: new(big.Int).SetInt64(0),
		}, stateTracer, nil,
	)
	require.NoError(t, err, "failed to read 0x6 balance")
	require.Equal(t, new(big.Int).SetBytes(ret).Int64(), int64(6969), "invalid 0x6 balance received pre transfer")

	// Transfer transaction
	stateTracer = tracer.NewTracer(true)
	transferCall, _ := hexutil.Decode("0xa9059cbb00000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000001b37")
	_, ret, _, err = exec.CallAndPersist(
		ctx, ethereum.CallMsg{
			From:  sender,
			To:    &target,
			Data:  transferCall,
			Gas:   30000000,
			Value: new(big.Int).SetInt64(0),
		}, stateTracer, map[common.Address]entity.StateOverride{
			sender: {Balance: abi.MaxUint256},
		},
	)
	require.NoError(t, err, "failed to transfer weth")
	t.Log("trace", stateTracer.Fmt())

	// Check balance of recipient after transfer
	balanceOfx07, _ := hexutil.Decode("0x70a082310000000000000000000000000000000000000000000000000000000000000007")
	ret, _, err = exec.Call(
		ctx, ethereum.CallMsg{
			From:  sender,
			To:    &target,
			Data:  balanceOfx07,
			Gas:   30000000,
			Value: new(big.Int).SetInt64(0),
		}, stateTracer, nil,
	)
	require.NoError(t, err, "failed to read 0x7 balance")
	require.Equal(t, new(big.Int).SetBytes(ret).Int64(), int64(6967), "invalid 0x7 balance received post transfer")

	// Check balance of sender after transfer
	ret, _, err = exec.Call(
		ctx, ethereum.CallMsg{
			From:  sender,
			To:    &target,
			Data:  balanceOfx06,
			Gas:   30000000,
			Value: new(big.Int).SetInt64(0),
		}, stateTracer, nil,
	)
	require.NoError(t, err, "failed to read 0x6 balance")
	require.Equal(t, new(big.Int).SetBytes(ret).Int64(), int64(2), "invalid 0x6 balance received post transfer")
}

func TestBlockProduction(t *testing.T) {
	ctx := context.Background()
	reader := mockProvider{}
	accountsState := entity.NewAccountsState()
	accountsStorage := entity.NewAccountsStorage()
	forkCfg := entity.ForkConfig{
		ChainID:   69,
		ForkBlock: new(big.Int).SetUint64(1),
	}
	db := fork.NewDB(&reader, forkCfg, accountsStorage, accountsState)
	cfg := config.NewConfigWithDefaults()
	cfg.ForkConfig = &forkCfg
	stateTracer := tracer.NewTracer(true)
	target := types.Address0x69
	exec, err := executor.NewExecutor(ctx, cfg, db, &reader)
	if err != nil {
		panic(err)
	}

	sender := common.HexToAddress("0x0000000000000000000000000000000000000006")

	// Deposit transaction
	deposit, _ := hexutil.Decode("0xd0e30db0")
	msg := ethereum.CallMsg{
		From:  sender,
		To:    &target,
		Data:  deposit,
		Gas:   30000000,
		Value: new(big.Int).SetInt64(6969),
	}
	hash, _, _, err := exec.CallAndPersist(
		ctx, msg, stateTracer, map[common.Address]entity.StateOverride{
			sender: {Balance: abi.MaxUint256},
		},
	)
	require.NoError(t, err, "failed to deposit")
	t.Log("trace", stateTracer.Fmt())

	require.NotNil(t, hash, "missing tx hash")

	t.Log("transaction Hash", hash.Hex())
	require.Equal(
		t, "0xfa652df356f74e065519c07cd5473ba8d26383b7f000f6f06563906b6d3d83e0", hash.Hex(), "mismatch txn hash",
	)

	txn := exec.TxnStorage().GetTransaction(*hash)
	require.Equal(t, txn.Type(), uint8(0), "invalid txn type")
	require.Equal(t, *txn.To(), target, "invalid txn target")
	require.Equal(t, txn.Value().String(), "6969", "invalid txn value")
	require.Equal(t, txn.Data(), deposit, "invalid txn data")

	receipt := exec.TxnStorage().GetReceipt(*hash)

	require.Equal(t, len(receipt.Logs), 1, "invalid logs emitted")
	require.Equal(t, receipt.Logs[0].Address, target, "invalid emitter")
	require.Equal(
		t, receipt.Logs[0].Topics[0].Hex(), "0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c",
		"invalid log topic [0]",
	)
	require.Equal(
		t, receipt.Logs[0].Topics[1].Hex(), "0x0000000000000000000000000000000000000000000000000000000000000006",
		"invalid log topic [1]",
	)
	require.Equal(
		t, hexutil.Encode(receipt.Logs[0].Data), "0x0000000000000000000000000000000000000000000000000000000000001b39",
		"invalid log data",
	)

	txnBytes, err := txn.MarshalJSON()
	require.NoError(t, err, "MarshalJSON")
	t.Log("transaction", string(txnBytes))

	receiptBytes, err := receipt.MarshalJSON()
	require.NoError(t, err, "MarshalJSON")
	t.Log("receipt", string(receiptBytes))

	blockHash, blockNum := exec.Latest()
	require.NotEqualf(
		t, blockHash.Hex(), "0x0000000000000000000000000000000000000000000000000000000000000000", "empty block hash",
	)
	require.Equal(t, blockNum, uint64(2), "invalid block number")

	state := exec.BlockStorage().GetBlockByHash(blockHash)

	require.True(
		t, reflect.DeepEqual(state.Block.Transactions(), types2.Transactions{txn}), "invalid txn found uin block",
	)
	require.Equal(t, state.Block.Number().Uint64(), uint64(2), "invalid block number")
}

func TestExecuteE2ELocal(t *testing.T) {
	fmt.Println("started0")

	ctx := context.Background()
	reader, _ := provider.NewJsonRPCProvider("https://arb-mainnet.g.alchemy.com/v2/Xsw5QFHAMSO9nRQ9fBhbCPm8E5Xv8JP9")
	accountsState := entity.NewAccountsState()
	accountsStorage := entity.NewAccountsStorage()
	forkCfg := entity.ForkConfig{
		ChainID:   42161,
		ForkBlock: new(big.Int).SetUint64(324209757),
	}

	fmt.Println("started12")

	db := fork.NewDB(reader, forkCfg, accountsStorage, accountsState)
	cfg := config.NewConfigWithDefaults()
	cfg.ForkConfig = &forkCfg
	stateTracer := tracer.NewTracer(true)
	target := common.HexToAddress("0x29fff4b07d3d800706fc56e9a62b0d976375045d")
	exec, err := executor.NewExecutor(ctx, cfg, db, reader, executor.WithPreviousState(common.HexToHash("0xabcd"), 324209757))
	if err != nil {
		panic(err)
	}
	fmt.Println("started1")

	sender := common.HexToAddress("0x6e518c2d1dc1ada234678692c25f09be88231394")

	// Deposit transaction
	deposit, _ := hexutil.Decode("0x6a76120200000000000000000000000040a2accbd92bca938b02010e17a5b8929b49130d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003273800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140713bbd82113e104c3a45661134f97648079220000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001a848d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001a2b00912ce59144191c1204e64559fe8253a0e49e654800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000ef59f0ad1be369189e7dd30fb474263a87400c73000000000000000000000000000000000000000000000003b8f25efe4600c7d200912ce59144191c1204e64559fe8253a0e49e654800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b30000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae0000000000000000000000000000000000000000000005cd41c20e4f1b3770bf001231deb6f5749ef6ce6943a275a1d3e7486f4eae000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018a44666fc8000fbed1d535787cd49ac5a422130bb6cf8d76023f353c683a7e204aca6c2c5e900000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000029fff4b07d3d800706fc56e9a62b0d976375045d00000000000000000000000000000000000000000000000000000001c51737df000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000086c6966692d617069000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a307830303030303030303030303030303030303030303030303030303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000001ff3684f28c67538d4d072c227340000000000000000000000000000000000001ff3684f28c67538d4d072c22734000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000005cd41c20e4f1b3770bf00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000016242213bc0b000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000912ce59144191c1204e64559fe8253a0e49e65480000000000000000000000000000000000000000000005cd41c20e4f1b3770bf000000000000000000000000b254ee265261675528bddb0796741c0c65a4c15800000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000015441fff991f0000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000001c517130a00000000000000000000000000000000000000000000000000000000000000a0cd24677f47f5aa49e3e5ff84627ab30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000005400000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000000000000000008a000000000000000000000000000000000000000000000000000000000000009e00000000000000000000000000000000000000000000000000000000000000b800000000000000000000000000000000000000000000000000000000000000ca00000000000000000000000000000000000000000000000000000000000000dc00000000000000000000000000000000000000000000000000000000000000ee0000000000000000000000000000000000000000000000000000000000000108000000000000000000000000000000000000000000000000000000000000011a000000000000000000000000000000000000000000000000000000000000013e000000000000000000000000000000000000000000000000000000000000000e4c1fb425e000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000912ce59144191c1204e64559fe8253a0e49e65480000000000000000000000000000000000000000000005cd41c20e4f1b3770bf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067f5110300000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000000000000000000000000000000000000000186900000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c912ce59144191c1204e64559fe8253a0e49e6548000001f482af49447d8a07e3bd95bd0d56f35241523fbab100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000000000000000000000000000000000000000053500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c912ce59144191c1204e64559fe8253a0e49e65480100006482af49447d8a07e3bd95bd0d56f35241523fbab100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000000000000000000000000000000000000000030100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c912ce59144191c1204e64559fe8253a0e49e654805000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c912ce59144191c1204e64559fe8253a0e49e6548000001f4ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000000000000000000000000000000000000000045700000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c82af49447d8a07e3bd95bd0d56f35241523fbab100000064af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010438c9c14700000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000152800000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000242e1a7d4d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016438c9c147000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000de632c3a214d5f14c1d8ddf0b92f8bcd188fee45000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000842668dfaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000b254ee265261675528bddb0796741c0c65a4c1580000000000000000000000000000000000000000000000000000000000000e3400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c82af49447d8a07e3bd95bd0d56f35241523fbab101000064af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000b254ee265261675528bddb0796741c0c65a4c1580000000000000000000000000000000000000000000000000000000000001be600000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c82af49447d8a07e3bd95bd0d56f35241523fbab105000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c82af49447d8a07e3bd95bd0d56f35241523fbab101000064fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016438c9c147000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000000000000000000000000000000000000000000000000000000027100000000000000000000000007f90122bf0700f9e7e1f688fe926940e8839f353000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000843df021240000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e48d68a156000000000000000000000000b254ee265261675528bddb0796741c0c65a4c158000000000000000000000000000000000000000000000000000000000000191c00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002cff970a61a04b1ca14834a43f5de4533ebddb5cc805000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020438c9c147000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000002710000000000000000000000000aa23611badafb62d37e7295a682d21960ac85a90000000000000000000000000000000000000000000000000000000000000008400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000124c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000b254ee265261675528bddb0796741c0c65a4c1580000000000000000000000000000000000000000000000000000000067f5110300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bff970a61a04b1ca14834a43f5de4533ebddb5cc8000032af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064c876d21d000000000000000000000000f5c4f3dc02c3fb9279495a8fef7b0741da956157000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000001c75e17ae0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410000000000000000000000006e518c2d1dc1ada234678692c25f09be8823139400000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000")
	start := time.Now()

	fmt.Println("started")
	_, ret, _, err := exec.CallAndPersist(
		ctx, ethereum.CallMsg{
			From:  sender,
			To:    &target,
			Data:  deposit,
			Gas:   80000000,
			Value: new(big.Int).SetInt64(0),
		}, stateTracer, map[common.Address]entity.StateOverride{
			sender: {Balance: abi.MaxUint256},
			common.HexToAddress("0x29fFF4B07D3D800706fc56E9a62b0d976375045d"): {
				Storage: entity.Storage{
					common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000004"): common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000001"),
					common.HexToHash("0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8"): common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000"),
				},
			},
			common.HexToAddress("0x6FCf22e22f736D9ead75de8A1f12cA869287E229"): {
				Storage: entity.Storage{
					common.HexToHash("0x418a1e184a9c025a598bc6954623eefcd0b6674c220be8f68507305905325a29"): common.HexToHash("0x000000000000000000000000cEBcf0BbC8381b1d8C516070080B9e5EFA207938"),
				},
			},
		},
	)

	t.Log("trace", stateTracer.Fmt())
	require.NoError(t, err, "failed to call error")
	t.Log("err", err)
	t.Log("return", hexutil.Encode(ret))
	elapsed := time.Since(start)
	fmt.Printf("Operation took %s\n", elapsed)

}
